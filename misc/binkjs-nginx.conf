# This file assumes that you have the default/typical Nginx configuration file
# in /etc/nginx/nginx.conf and that that file contains the directive for virtual
# host configurations. Specifically, a block that looks like this:
#
# include /etc/nginx/sites-enabled/*;
#
# Checkout the handy blog at 
# https://medium.com/techvblogs/how-to-manage-and-use-nginx-virtual-host-in-ubuntu-72aa88167110
# for more information/examples.

server {
    # Listen to regular HTTP port ONLY so that we can redirect
    # to HTTPS port.
	listen 80;
	listen [::]:80;

	# Enables http2 which has become standard and allows better
	# connection management and pooling. Also enables TLS encryption.
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

    # You will need to populate your own SSL certificates for Nginx.
    # We recommend using LetsEncrypt and Certbot (https://eff-certbot.readthedocs.io/en/latest/)
    # But you may have a different strategy.  These are the typical locations
    # for SSL keys/certs if you use Cretbot, but they may differ on your server.
	ssl_certificate /etc/letsencrypt/live/yourserver.com/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/yourserver.com/privkey.pem;

    # Again, your location may be different.
	access_log /srv/www/yourserver.com/log/access.log;
	error_log /srv/www/yourserver.com/log/error.log;

	# If you are like us, you end up with some users who want to preserve uncompressed
	# high fidelity versions of your audio recordings until the end of time (REESE!)
	#
	# This means that you will end up with some large files, like AIFF and WAV and
	# See the Nginx Docs for more information on how to set this information, but
	# basically, it should be the size of the largest file you plan to accept.
	# https://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
	client_max_body_size 500M;

    # Your server name may be different.
	server_name yourserver.com;

    # This is a magical directive that says to take ANY incoming
    # request that starts with HTTP and move it to HTTPS.
	if ($scheme = http) {
		return 301 https://$server_name$request_uri;
	}

	# This block is absolutely critical to cause Nginx to send the headers
	# required to BINK.js such that BINK.js can establish a session and
	# capture the cookies needed to provide a session for an authenticated
	# administrator.  This also relates to `settings.session.secure` option
	# in settings.json.
	#
	# BINK.js listens on port 3001 by default.  This can be changed by modifying the
	# environment variable named "PORT" and setting it to a valid TCP port.
	location / {
		proxy_pass http://localhost:3001;
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}
}
